using System;

// Base class Shape
abstract class Shape
{
    public abstract double Area();
    public abstract double Perimeter();
}

// Rectangle class derived from Shape
class Rectangle : Shape
{
    private double length;
    private double width;

    public Rectangle(double length, double width)
    {
        this.length = length;
        this.width = width;
    }

    public override double Area()
    {
        return length * width;
    }

    public override double Perimeter()
    {
        return 2 * (length + width);
    }

    public void DisplayInfo()
    {
        Console.WriteLine("Rectangle:");
        Console.WriteLine($"Length: {length}");
        Console.WriteLine($"Width: {width}");
        Console.WriteLine($"Area: {Area()}");
        Console.WriteLine($"Perimeter: {Perimeter()}");
    }
}

// Circle class derived from Shape
class Circle : Shape
{
    private double radius;

    public Circle(double radius)
    {
        this.radius = radius;
    }

    public override double Area()
    {
        return Math.PI * radius * radius;
    }

    public override double Perimeter()
    {
        return 2 * Math.PI * radius;
    }

    public void DisplayInfo()
    {
        Console.WriteLine("Circle:");
        Console.WriteLine($"Radius: {radius}");
        Console.WriteLine($"Area: {Area()}");
        Console.WriteLine($"Circumference: {Perimeter()}");
    }
}

class Program
{
    static void Main(string[] args)
    {
        // Create an instance of Rectangle
        Rectangle rectangle = new Rectangle(5, 3);
        // Display rectangle information
        rectangle.DisplayInfo();

        Console.WriteLine();

        // Create an instance of Circle
        Circle circle = new Circle(4);
        // Display circle information
        circle.DisplayInfo();
    }
}
